const obj = {

  a: 10,

  arrow: () => console.log(this.a)
  regular() {

    console.log(this.a); //10

  }
};
==========================
const a = {};
const b = { key: 'b' };
const c = { key: 'c' };
 
a[b] = 123;
a[c] = 456;
 
console.log(a[b]); // 456
==========================
console.log(null == undefined);  // ? true
console.log(null === undefined); // ? false
console.log([] == ![]);          // ? true
=============================
console.log('1');
 
setTimeout(() => {
  console.log('2 - setTimeout');
}, 0);
 
Promise.resolve().then(() => {
  console.log('3 - promise');
});
 
process.nextTick(() => {
  console.log('4 - nextTick');
});
 
setImmediate(() => {
  console.log('5 - setImmediate');
});
 
queueMicrotask(() => {
  console.log('6 - queueMicrotask');
});
 
console.log('7');
================================

==========
sysnchronous
MicroTask
   - nextTick
   - Ptomise
    - QueueMicrosTask
setTImeout -
- setImmediate 


 function Counter() {

  const [count, setCount] = React.useState(0);
 
  function handleClick() {

    setTimeout(() => {

      setCount(count + 1); // 1

    }, 1000);

  }
 
  return <button onClick={handleClick}>Click</button>;

}
 
===========================================================
function App() {
  return
    <div>Hello</div>; 
}
============================================================
    const [a, setA] = useState(0);
const [b, setB] = useState(0);

function update() {
  setA(prevA => prevA + 1);
  setB(prevB => prevB + 1);
  console.log(a, b); // ðŸ‘€ This logs 0, 0 â€” not 1, 1
}

useEffect(() => {
  update();
}, []);
useEffect(() => {
  console.log(a,b) // 1, 1
}, [a,b]);
=========================================
